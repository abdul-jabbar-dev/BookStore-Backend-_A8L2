// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  Customer
  Admin
}

enum ORDER_STATUS {
  Pending
  Shipping
  Delivered
}

model Credential {
  userId       String  @id() @unique()
  user         User    @relation(fields: [userId], references: [id])
  password     String
  email        String  @unique()
  accessToken  String?
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              String            @id() @default(uuid())
  name            String
  email           String            @unique()
  role            ROLE              @default(Customer)
  contactNo       String
  address         String
  profileImg      String?
  reviewAndRating ReviewAndRating[]
  order           Order[]
  credential      Credential?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id() @default(uuid())
  title String @unique
  books Book[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id              String            @id() @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  reviewAndRating ReviewAndRating[]
  orderedBook     OrderedBook[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewAndRating {
  id     String @id() @default(uuid())
  review String
  rating Int
  userId String

  user   User   @relation(fields: [userId], references: [id])
  bookId String
  book   Book   @relation(fields: [bookId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderedBook {
  id       String @id() @default(uuid())
  quantity Int

  bookId String
  Book   Book   @relation(fields: [bookId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  Order     Order    @relation(fields: [orderId], references: [id])
}

model Order {
  id     String       @id() @default(uuid())
  statue ORDER_STATUS @default(Pending)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderedBookId OrderedBook[]
}
