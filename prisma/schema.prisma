generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credential {
  userId       String   @id @unique
  password     String
  email        String   @unique
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  role            ROLE              @default(Customer)
  contactNo       String
  address         String
  profileImg      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  credential      Credential?
  order           Order[]
  reviewAndRating ReviewAndRating[]
}

model Category {
  id        String   @id @default(uuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Book {
  id              String            @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String
  categoryId      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  category        Category          @relation(fields: [categoryId], references: [id])
  orderedBook     OrderedBook[]
  reviewAndRating ReviewAndRating[]
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model OrderedBook {
  id        String   @id @default(uuid())
  bookId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  Book      Book     @relation(fields: [bookId], references: [id])
  Order     Order    @relation(fields: [orderId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  statue        ORDER_STATUS  @default(Pending)
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  orderedBookId OrderedBook[]
}

enum ROLE {
  Customer
  Admin
  customer
  admin
}

enum ORDER_STATUS {
  Pending
  Shipping
  Delivered
}
